-- Creates the database and sets up the data structure
-- Should be run against a pre-created schema.
START TRANSACTION;

CREATE TABLE PRODUCTS (
    ID INT GENERATED ALWAYS AS IDENTITY,
    PRODUCT_ID VARCHAR(100) NOT NULL,
    NAME VARCHAR NOT NULL,

    -- Constraints
    PRIMARY KEY(ID)
);

CREATE TABLE VERSIONS (
    ID INT GENERATED ALWAYS AS IDENTITY,
    PRODUCT_ID INT NOT NULL,
    VERSION VARCHAR(255) NOT NULL,
    CHANGELOG VARCHAR,
    RECOMMENDED BOOLEAN NOT NULL,
    BROKEN BOOLEAN NOT NULL,

    -- Constraints
    PRIMARY KEY(ID),
    FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCTS(ID) ON DELETE CASCADE
);

CREATE TABLE ARTEFACTS (
    ID INT GENERATED ALWAYS AS IDENTITY,
    VERSION_ID INT NOT NULL,
    IDENTIFIER VARCHAR(100) DEFAULT('DEFAULT'),
    URL VARCHAR NOT NULL,
    GIT_COMMIT VARCHAR(40),
    AUTHOR VARCHAR,
    CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),

    -- Constraints
    PRIMARY KEY(ID),
    FOREIGN KEY(VERSION_ID) REFERENCES VERSIONS(ID) ON DELETE CASCADE
);

CREATE TABLE CHECKSUMS (
    ID INT GENERATED ALWAYS AS IDENTITY,
    ARTEFACT_ID INT NOT NULL,
    CHECKSUM_TYPE VARCHAR(10) NOT NULL,
    CHECKSUM VARCHAR(255) NOT NULL,

    -- Constraints
    PRIMARY KEY(ID),
    FOREIGN KEY(ARTEFACT_ID) REFERENCES VERSIONS(ID) ON DELETE CASCADE
);

CREATE TABLE AUDIT (
    ID BIGINT GENERATED ALWAYS AS IDENTITY,
    "USER" VARCHAR NOT NULL,
    "ACTION" VARCHAR NOT NULL,
    NOTE VARCHAR,

    -- Constraints
    PRIMARY KEY(ID)
);

-- Stored Procedures

CREATE FUNCTION get_artefacts(product varchar, version_to_select varchar, recommended_only boolean) RETURNS refcursor
LANGUAGE plpgsql
AS
$$
DECLARE
    refcur refcursor;
BEGIN
    OPEN refcur FOR
        SELECT *
        FROM ARTEFACTS a
        INNER JOIN VERSIONS v ON a.VERSION_ID = v.ID
        INNER JOIN PRODUCTS p ON v.PRODUCT_ID = p.ID
        LEFT JOIN CHECKSUMS ch ON a.ID = ch.ARTEFACT_ID -- checksums may not exist
        WHERE p.NAME = product
            AND (version_to_select IS NULL OR v.VERSION = version_to_select)
            AND (recommended_only = FALSE OR v.RECOMMENDED = TRUE)
        ORDER BY v.VERSION;
    RETURN refcur;
END;
$$

COMMIT;